generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  telephone     String          @unique @db.String
  password      String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]       // Relationship with Project
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events       Event[]  // Relationship with Event
  geolocation  Geolocation? // Relationship with Geolocation
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Event {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  sessionId     String        @db.ObjectId
  eventType     String
  targetTag     String?
  targetId      String?
  targetClass   String?
  href          String?
  path          String
  query         String?
  session       Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

//analytics
model Geolocation {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress     String
  country       String
  region        String
  city          String
  zipCode       String
  latitude      Float
  longitude     Float
  sessionId     String        @unique @db.ObjectId // Ensure uniqueness for one-to-one relation
  session       Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

// Project, Nodes, Edges, and Canvas Models
model Project {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String        // Name of the project
  description    String?       // Optional project description
  nodes          Node[]        // Relationship with nodes
  edges          Edge[]        // Relationship with edges
  canvas         Canvas?       // One-to-one relation with canvas data
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Node {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String       @db.ObjectId
  type        String       // Type of node (e.g., default, input, output)
  positionX   Float        // X position of the node on canvas
  positionY   Float        // Y position of the node on canvas
  data        Json         // JSON containing node-specific data
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Edge {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String       @db.ObjectId
  source      String       // ID of the source node
  target      String       // ID of the target node
  label       String?      // Optional label for the edge
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Canvas {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String       @db.ObjectId @unique
  backgroundColor String?  // Background color of the canvas
  zoom        Float        // Zoom level of the canvas
  panX        Float        // X position of the pan
  panY        Float        // Y position of the pan
  gridEnabled Boolean      // Whether the grid is enabled or not
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
